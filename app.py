{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "07e175fd-402c-4778-a54c-61a154a7eb58",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-04 02:41:22.638 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:22.639 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.645 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run D:\\AI-ML\\software\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-10-04 02:41:23.646 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.649 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.651 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.653 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.655 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.658 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.662 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-10-04 02:41:23.663 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# ------------------------\n",
    "# Streamlit UI\n",
    "# ------------------------\n",
    "st.set_page_config(page_title=\"EDA & Feature Engineering App\", layout=\"wide\")\n",
    "\n",
    "st.title(\"üìä EDA & Feature Engineering Dashboard\")\n",
    "st.write(\"Upload a dataset to explore EDA, Feature Engineering, Scaling, and PCA.\")\n",
    "\n",
    "# File uploader\n",
    "uploaded_file = st.file_uploader(\"Upload your CSV dataset\", type=[\"csv\"])\n",
    "\n",
    "if uploaded_file:\n",
    "    # Load data\n",
    "    df = pd.read_csv(uploaded_file)\n",
    "    st.success(\"‚úÖ Dataset uploaded successfully!\")\n",
    "\n",
    "    # Show dataset preview\n",
    "    st.subheader(\"üìå Dataset Preview\")\n",
    "    st.dataframe(df.head())\n",
    "\n",
    "    # Basic info\n",
    "    st.markdown(\"### üîπ Dataset Info\")\n",
    "    st.write(f\"Shape: {df.shape}\")\n",
    "    st.write(f\"Columns: {list(df.columns)}\")\n",
    "    st.write(df.describe())\n",
    "\n",
    "    # EDA Section\n",
    "    st.subheader(\"üìä Exploratory Data Analysis (EDA)\")\n",
    "\n",
    "    # Correlation Heatmap\n",
    "    st.write(\"#### Correlation Heatmap\")\n",
    "    fig, ax = plt.subplots(figsize=(8, 6))\n",
    "    sns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\", ax=ax)\n",
    "    st.pyplot(fig)\n",
    "\n",
    "    # Feature Engineering Section\n",
    "    st.subheader(\"‚öôÔ∏è Feature Engineering\")\n",
    "\n",
    "    # Missing Values\n",
    "    st.write(\"#### Missing Values\")\n",
    "    st.write(df.isnull().sum())\n",
    "\n",
    "    # Encoding Categorical Variables\n",
    "    cat_cols = df.select_dtypes(include=[\"object\"]).columns\n",
    "    if len(cat_cols) > 0:\n",
    "        st.write(\"Encoding categorical columns:\", list(cat_cols))\n",
    "        df_encoded = pd.get_dummies(df, drop_first=True)\n",
    "    else:\n",
    "        st.write(\"No categorical columns found. Skipping encoding.\")\n",
    "        df_encoded = df.copy()\n",
    "\n",
    "    st.write(\"Shape after encoding:\", df_encoded.shape)\n",
    "\n",
    "    # Feature Scaling\n",
    "    st.subheader(\"üìè Feature Scaling\")\n",
    "    numeric_cols = df_encoded.select_dtypes(include=[\"int64\", \"float64\"]).columns\n",
    "\n",
    "    if len(numeric_cols) > 0:\n",
    "        scaler = StandardScaler()\n",
    "        scaled_data = scaler.fit_transform(df_encoded[numeric_cols])\n",
    "        df_scaled = pd.DataFrame(scaled_data, columns=numeric_cols)\n",
    "\n",
    "        st.write(\"Scaled Data (first 5 rows):\")\n",
    "        st.dataframe(df_scaled.head())\n",
    "    else:\n",
    "        st.warning(\"No numeric columns found for scaling.\")\n",
    "\n",
    "    # Feature Extraction with PCA\n",
    "    st.subheader(\"üîç Feature Extraction (PCA)\")\n",
    "\n",
    "    if len(numeric_cols) > 1:\n",
    "        pca = PCA(n_components=2)\n",
    "        pca_data = pca.fit_transform(df_encoded[numeric_cols])\n",
    "        df_pca = pd.DataFrame(pca_data, columns=[\"PC1\", \"PC2\"])\n",
    "\n",
    "        st.write(\"PCA Results (first 5 rows):\")\n",
    "        st.dataframe(df_pca.head())\n",
    "\n",
    "        # Scatter plot\n",
    "        fig, ax = plt.subplots()\n",
    "        ax.scatter(df_pca[\"PC1\"], df_pca[\"PC2\"], alpha=0.6)\n",
    "        ax.set_xlabel(\"Principal Component 1\")\n",
    "        ax.set_ylabel(\"Principal Component 2\")\n",
    "        ax.set_title(\"PCA Scatter Plot\")\n",
    "        st.pyplot(fig)\n",
    "\n",
    "    else:\n",
    "        st.warning(\"Not enough numeric columns for PCA.\")\n",
    "\n",
    "    # Download Processed Dataset\n",
    "    st.subheader(\"‚¨áÔ∏è Download Processed Dataset\")\n",
    "    csv = df_encoded.to_csv(index=False).encode(\"utf-8\")\n",
    "    st.download_button(\"Download CSV\", csv, \"processed_dataset.csv\", \"text/csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c40cc45-2095-44b7-9afb-6235159c46ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "!git "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
